import streamlit as st
from PIL import Image
from datetime import date
import pandas as pd
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import Alignment, Border, Side, Font, PatternFill

# --- T√≠tulo ---
st.set_page_config(page_title="Checklist √Årea de Planificaci√≥n", page_icon="‚úÖ")
img = Image.open("logo.png")

# --- T√≠tulo con imagen al lado ---
col1, col2 = st.columns([0.1, 1])  
col1.image(img, width=60)   
col2.markdown("## Checklist √Årea de Planificaci√≥n")  

# --- Informaci√≥n del checklist ---
col1, col2, col3 = st.columns(3)

# Tienda
tiendas = [
    "Plaza Oeste","Florida Center","Plaza Alameda","Plaza Sur","Portal Rancagua","Plaza Trebol",
    "Plaza Vespucio","Plaza Los Angeles","Plaza Norte","Apumanque","Portal √ëu√±oa","Plaza Calama",
    "Plaza Antofagasta","Portal Temuco","Arauco Premium Outlet","Paseo Vi√±a Centro","Costanera Center",
    "Plaza Bio Bio","Arauco Maipu","Mall del Centro Concepcion","Plaza Tobalaba","Portal Osorno",
    "Arauco Quilicura","Plaza Copiapo","Plaza Ega√±a","Open Plaza Ovalle","Easton Quilicura",
    "Vivo Outlet Maip√∫","Plaza Iquique","Vivo Los Trapenses","Gran Avenida Esp.Urbano",
    "San Pedro Arauco Outlet","Portal Centro Talca","Mall Valle Curico","Arauco Chillan","Midmall Outlet",
    "Paseo Estado","Paseo Chilo√©","La F√°brica Patio Outlet","Vivo Outlet Pe√±uelas","Vi√±a Outlet Park",
    "Valdivia Centro","Vivo San Fernando","Parque Arauco","Vivo Outlet La Florida","Portal Valdivia",
    "Patio Rancagua","Vivo Coquimbo","Vivo Outlet Temuco","Arauco Coronel","Mall Barrio Independencia",
    "Outlet Style","Easton Temuco","PATRONATO 403","Portal El Llano","Paseo Alerce","Santa Filomena 540",
    "Antofagasta Outlet Espacio Urbano","Paseo Costanera Puerto Montt","Paseo Puerto Varas",
    "Vivo Outlet Chillan","Curauma Outlet","15 Norte Vi√±a","Talca Outlet Go Florida","Pionero Punta Arenas",
    "Rancagua Outlet Mall","Mall Paseo San Bernardo","Paseo Quillota","Easton Segundo Piso"
]
tienda = col1.selectbox("üè™ Tienda", tiendas)

# Encargado
encargados = ["Brany G√≥mez", "Gerardo Mu√±oz", "Juan Pablo"]
encargado = col2.selectbox("üë§ Encargado", encargados)

# Fecha
fecha_checklist = col3.date_input("üìÖ Fecha del checklist", value=date.today())

st.markdown("---")  

st.subheader("Puntos a revisar")
# --- Lista de tareas ---
tareas = [
    "Cubicaci√≥n vestuario",
    "Cubicaci√≥n calzado",
    "Reposici√≥n (Curva, RAMI)",
    "Despachos",
    "Club Pillin",
    "Mix colecci√≥n",
    "Visual merchandising",
    "Competencia",
    "Gesti√≥n equipo de venta",
    "Dotaci√≥n",
    "Experiencia del cliente (CX)",
    "Posibles √°reas de mejora"
]

# --- Estado de tareas ---
estado = []
valores_comentario = []
valores_opcion = []
opcion_cub = ["70%","75%","80%","85%","90%","95%","100%","105%","110%","115%","120%","125%","130%"]
dot = [1,2,3,4,5,6]

for tarea in tareas:
    checked = st.checkbox(tarea, key=f"chk_{tarea}")
    estado.append(checked)
    
    if tarea in ["Cubicaci√≥n vestuario", "Cubicaci√≥n calzado"]:
        opciones = st.selectbox(f"% Cub ", opcion_cub, index=6, key=f"opt_{tarea}")
        valores_opcion.append(opciones)
        if checked:
            comentario = st.text_input(f"Comentario para {tarea}", key=f"com_{tarea}")
        else:
            comentario = ""
        valores_comentario.append(comentario)
        
    elif tarea == "Dotaci√≥n":
        opciones = st.selectbox(f"Dotaci√≥n", dot, index=2, key=f"opt_{tarea}")
        valores_opcion.append(opciones)
        if checked:
            comentario = st.text_input(f"Comentario para {tarea}", key=f"com_{tarea}")
        else:
            comentario = ""
        valores_comentario.append(comentario)
        
    else:
        if checked:
            comentario = st.text_input(f"Comentario para {tarea}", key=f"com_{tarea}")
        else:
            comentario = ""
        valores_opcion.append("")
        valores_comentario.append(comentario)

# --- Progreso ---
completadas = sum(estado)
total = len(tareas)
progreso = completadas / total if total > 0 else 0

st.progress(progreso)
st.write(f"Haz completado **{completadas} de {total} √≠tems**.")

faltantes = total - completadas
if completadas == total:
    st.success("üéâ ¬°Checklist completo!")
elif completadas > 0:
    st.info(f"üí™ A√∫n faltan **{faltantes}** puntos por abordar." )
else:
    st.warning("üôå A√∫n no comienzas tu Checklist")

# --- Validar que todas las tareas est√©n completadas ---
if all(estado):
    if st.button("‚úÖ Completado"):
        fecha_str = fecha_checklist.strftime("%d-%m-%Y")

        # Crear DataFrame solo con la tabla
        df = pd.DataFrame({
            "Tarea": tareas,
            "Completada": estado,
            "Valor": valores_opcion,
            "Comentario": valores_comentario
        })    

        # Guardar a Excel en memoria
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="Checklist", startrow=3)

        # Abrir con openpyxl para aplicar formato
        output.seek(0)
        wb = load_workbook(output)
        ws = wb.active

        # --- Informaci√≥n en filas separadas --- 
        ws["A1"] = f"Tienda: {tienda}"
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=4)
        ws["A1"].alignment = Alignment(horizontal="center", vertical="center")

        ws["A2"] = f"Encargado: {encargado}"
        ws.merge_cells(start_row=2, start_column=1, end_row=2, end_column=4)
        ws["A2"].alignment = Alignment(horizontal="center", vertical="center")

        ws["A3"] = f"Fecha: {fecha_str}"
        ws.merge_cells(start_row=3, start_column=1, end_row=3, end_column=4)
        ws["A3"].alignment = Alignment(horizontal="center", vertical="center")

        # --- Definir borde fino ---
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )

        # --- Bordes para las 3 primeras filas ---
        for row in ws.iter_rows(min_row=1, max_row=3, min_col=1, max_col=4):
            for cell in row:
                cell.border = thin_border

        # --- Bordes para la tabla ---
        for row in ws.iter_rows(min_row=4, max_row=3+len(df)+1, min_col=1, max_col=4):
            for cell in row:
                cell.border = thin_border

        # --- Encabezados en negrita y con color ---
        header_font = Font(bold=True)
        header_fill = PatternFill(start_color="FFD966", end_color="FFD966", fill_type="solid")  # amarillo claro

        for cell in ws[4]:  # fila 4, encabezados
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center", vertical="center")

        # Guardar cambios otra vez a BytesIO
        final_output = BytesIO()
        wb.save(final_output)
        final_output.seek(0)

        # Bot√≥n para descargar
        st.download_button(
            label="üì• Descargar checklist",
            data=final_output,
            file_name="Checklist_Completo.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
else:
    st.error("‚ùå Debes marcar todos los check antes de completar el checklist.")



